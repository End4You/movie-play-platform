// Code generated by MockGen. DO NOT EDIT.
// Source: movie.trpc.go

// Package pb_hub is a generated GoMock package.
package pb_hub

import (
	context "context"
	client "git.code.oa.com/trpc-go/trpc-go/client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockUserService) Register(ctx context.Context, req *RegisterReq, rsp *RegisterRsp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req, rsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockUserServiceMockRecorder) Register(ctx, req, rsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, req, rsp)
}

// CheckUserName mocks base method
func (m *MockUserService) CheckUserName(ctx context.Context, req *CheckUserNameReq, rsp *CheckUserNameRsp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserName", ctx, req, rsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserName indicates an expected call of CheckUserName
func (mr *MockUserServiceMockRecorder) CheckUserName(ctx, req, rsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserName", reflect.TypeOf((*MockUserService)(nil).CheckUserName), ctx, req, rsp)
}

// Login mocks base method
func (m *MockUserService) Login(ctx context.Context, req *LoginReq, rsp *LoginRsp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req, rsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockUserServiceMockRecorder) Login(ctx, req, rsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, req, rsp)
}

// MockMovieService is a mock of MovieService interface
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// GetMovieList mocks base method
func (m *MockMovieService) GetMovieList(ctx context.Context, req *GetMovieListReq, rsp *GetMovieListRsp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieList", ctx, req, rsp)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMovieList indicates an expected call of GetMovieList
func (mr *MockMovieServiceMockRecorder) GetMovieList(ctx, req, rsp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieList", reflect.TypeOf((*MockMovieService)(nil).GetMovieList), ctx, req, rsp)
}

// MockUserClientProxy is a mock of UserClientProxy interface
type MockUserClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientProxyMockRecorder
}

// MockUserClientProxyMockRecorder is the mock recorder for MockUserClientProxy
type MockUserClientProxyMockRecorder struct {
	mock *MockUserClientProxy
}

// NewMockUserClientProxy creates a new mock instance
func NewMockUserClientProxy(ctrl *gomock.Controller) *MockUserClientProxy {
	mock := &MockUserClientProxy{ctrl: ctrl}
	mock.recorder = &MockUserClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserClientProxy) EXPECT() *MockUserClientProxyMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockUserClientProxy) Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (*RegisterRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*RegisterRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUserClientProxyMockRecorder) Register(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserClientProxy)(nil).Register), varargs...)
}

// CheckUserName mocks base method
func (m *MockUserClientProxy) CheckUserName(ctx context.Context, req *CheckUserNameReq, opts ...client.Option) (*CheckUserNameRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckUserName", varargs...)
	ret0, _ := ret[0].(*CheckUserNameRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserName indicates an expected call of CheckUserName
func (mr *MockUserClientProxyMockRecorder) CheckUserName(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserName", reflect.TypeOf((*MockUserClientProxy)(nil).CheckUserName), varargs...)
}

// Login mocks base method
func (m *MockUserClientProxy) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*LoginRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserClientProxyMockRecorder) Login(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserClientProxy)(nil).Login), varargs...)
}

// MockMovieClientProxy is a mock of MovieClientProxy interface
type MockMovieClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMovieClientProxyMockRecorder
}

// MockMovieClientProxyMockRecorder is the mock recorder for MockMovieClientProxy
type MockMovieClientProxyMockRecorder struct {
	mock *MockMovieClientProxy
}

// NewMockMovieClientProxy creates a new mock instance
func NewMockMovieClientProxy(ctrl *gomock.Controller) *MockMovieClientProxy {
	mock := &MockMovieClientProxy{ctrl: ctrl}
	mock.recorder = &MockMovieClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieClientProxy) EXPECT() *MockMovieClientProxyMockRecorder {
	return m.recorder
}

// GetMovieList mocks base method
func (m *MockMovieClientProxy) GetMovieList(ctx context.Context, req *GetMovieListReq, opts ...client.Option) (*GetMovieListRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMovieList", varargs...)
	ret0, _ := ret[0].(*GetMovieListRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieList indicates an expected call of GetMovieList
func (mr *MockMovieClientProxyMockRecorder) GetMovieList(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieList", reflect.TypeOf((*MockMovieClientProxy)(nil).GetMovieList), varargs...)
}
