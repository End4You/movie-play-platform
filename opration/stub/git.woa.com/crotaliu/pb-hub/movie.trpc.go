// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: movie.proto

package pb_hub

import (
	"context"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// MovieService defines service
type MovieService interface {

	// GetMovieList 获取视频列表
	GetMovieList(ctx context.Context, req *GetMovieListReq, rsp *GetMovieListRsp) (err error)
}

func MovieService_GetMovieList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &GetMovieListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MovieService).GetMovieList(ctx, reqbody.(*GetMovieListReq), rspbody.(*GetMovieListRsp))
	}

	rsp := &GetMovieListRsp{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// MovieServer_ServiceDesc descriptor for server.RegisterService
var MovieServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.moviePlay.operation.Movie",
	HandlerType: ((*MovieService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.moviePlay.operation.Movie/GetMovieList",
			Func: MovieService_GetMovieList_Handler,
		},
	},
}

// RegisterMovieService register service
func RegisterMovieService(s server.Service, svr MovieService) {
	if err := s.Register(&MovieServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Movie register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// MovieClientProxy defines service client proxy
type MovieClientProxy interface {

	// GetMovieList 获取视频列表
	GetMovieList(ctx context.Context, req *GetMovieListReq, opts ...client.Option) (rsp *GetMovieListRsp, err error)
}

type MovieClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewMovieClientProxy = func(opts ...client.Option) MovieClientProxy {
	return &MovieClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *MovieClientProxyImpl) GetMovieList(ctx context.Context, req *GetMovieListReq, opts ...client.Option) (*GetMovieListRsp, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.moviePlay.operation.Movie/GetMovieList")
	msg.WithCalleeServiceName(MovieServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moviePlay")
	msg.WithCalleeServer("operation")
	msg.WithCalleeService("Movie")
	msg.WithCalleeMethod("GetMovieList")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &GetMovieListRsp{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
