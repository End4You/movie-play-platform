// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: movie.proto

package pb_hub

import (
	"context"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	_ "git.code.oa.com/trpc-go/trpc-go/http"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/* ************************************ Service Definition ************************************ */

// UserService defines service
type UserService interface {

	// Register 用户注册
	Register(ctx context.Context, req *RegisterReq, rsp *RegisterRsp) (err error)

	// CheckUserName 检查用户名重复
	CheckUserName(ctx context.Context, req *CheckUserNameReq, rsp *CheckUserNameRsp) (err error)

	// Login 用户登录
	Login(ctx context.Context, req *LoginReq, rsp *LoginRsp) (err error)
}

func UserService_Register_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &RegisterReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(UserService).Register(ctx, reqbody.(*RegisterReq), rspbody.(*RegisterRsp))
	}

	rsp := &RegisterRsp{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func UserService_CheckUserName_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CheckUserNameReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(UserService).CheckUserName(ctx, reqbody.(*CheckUserNameReq), rspbody.(*CheckUserNameRsp))
	}

	rsp := &CheckUserNameRsp{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func UserService_Login_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &LoginReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(UserService).Login(ctx, reqbody.(*LoginReq), rspbody.(*LoginRsp))
	}

	rsp := &LoginRsp{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// UserServer_ServiceDesc descriptor for server.RegisterService
var UserServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.moviePlay.operation.User",
	HandlerType: ((*UserService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.moviePlay.operation.User/Register",
			Func: UserService_Register_Handler,
		},
		{
			Name: "/trpc.moviePlay.operation.User/CheckUserName",
			Func: UserService_CheckUserName_Handler,
		},
		{
			Name: "/trpc.moviePlay.operation.User/Login",
			Func: UserService_Login_Handler,
		},
	},
}

// RegisterUserService register service
func RegisterUserService(s server.Service, svr UserService) {
	if err := s.Register(&UserServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("User register error:%v", err))
	}

}

// MovieService defines service
type MovieService interface {

	// GetMovieList 获取视频列表
	GetMovieList(ctx context.Context, req *GetMovieListReq, rsp *GetMovieListRsp) (err error)
}

func MovieService_GetMovieList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &GetMovieListReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MovieService).GetMovieList(ctx, reqbody.(*GetMovieListReq), rspbody.(*GetMovieListRsp))
	}

	rsp := &GetMovieListRsp{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// MovieServer_ServiceDesc descriptor for server.RegisterService
var MovieServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.moviePlay.operation.Movie",
	HandlerType: ((*MovieService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.moviePlay.operation.Movie/GetMovieList",
			Func: MovieService_GetMovieList_Handler,
		},
	},
}

// RegisterMovieService register service
func RegisterMovieService(s server.Service, svr MovieService) {
	if err := s.Register(&MovieServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Movie register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// UserClientProxy defines service client proxy
type UserClientProxy interface {

	// Register 用户注册
	Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (rsp *RegisterRsp, err error)

	// CheckUserName 检查用户名重复
	CheckUserName(ctx context.Context, req *CheckUserNameReq, opts ...client.Option) (rsp *CheckUserNameRsp, err error)

	// Login 用户登录
	Login(ctx context.Context, req *LoginReq, opts ...client.Option) (rsp *LoginRsp, err error)
}

type UserClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewUserClientProxy = func(opts ...client.Option) UserClientProxy {
	return &UserClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *UserClientProxyImpl) Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (*RegisterRsp, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.moviePlay.operation.User/Register")
	msg.WithCalleeServiceName(UserServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moviePlay")
	msg.WithCalleeServer("operation")
	msg.WithCalleeService("User")
	msg.WithCalleeMethod("Register")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &RegisterRsp{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *UserClientProxyImpl) CheckUserName(ctx context.Context, req *CheckUserNameReq, opts ...client.Option) (*CheckUserNameRsp, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.moviePlay.operation.User/CheckUserName")
	msg.WithCalleeServiceName(UserServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moviePlay")
	msg.WithCalleeServer("operation")
	msg.WithCalleeService("User")
	msg.WithCalleeMethod("CheckUserName")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &CheckUserNameRsp{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *UserClientProxyImpl) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.moviePlay.operation.User/Login")
	msg.WithCalleeServiceName(UserServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moviePlay")
	msg.WithCalleeServer("operation")
	msg.WithCalleeService("User")
	msg.WithCalleeMethod("Login")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &LoginRsp{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

// MovieClientProxy defines service client proxy
type MovieClientProxy interface {

	// GetMovieList 获取视频列表
	GetMovieList(ctx context.Context, req *GetMovieListReq, opts ...client.Option) (rsp *GetMovieListRsp, err error)
}

type MovieClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewMovieClientProxy = func(opts ...client.Option) MovieClientProxy {
	return &MovieClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *MovieClientProxyImpl) GetMovieList(ctx context.Context, req *GetMovieListReq, opts ...client.Option) (*GetMovieListRsp, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/trpc.moviePlay.operation.Movie/GetMovieList")
	msg.WithCalleeServiceName(MovieServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moviePlay")
	msg.WithCalleeServer("operation")
	msg.WithCalleeService("Movie")
	msg.WithCalleeMethod("GetMovieList")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &GetMovieListRsp{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
